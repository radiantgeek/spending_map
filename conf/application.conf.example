# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="bREA0UCvhbE:86oVVEc<OK=iOkDndRS8Y3NWy_l^qE6Rt]W?_U4NdU9>Md/mH/Qv"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# for SQL logging
logger.com.jolbox.bonecp=DEBUG
#db.default.logStatements=true

# for logging of WS requests to services
logger.services.cacher=ERROR
logger.services.elastic=ERROR
logger.services.spending=DEBUG
logger.services.geocoder=DEBUG

# Contexts
# ~~~~~

logstash-context            { fork-join-executor { parallelism-max = 5 } }
cacher-context              { fork-join-executor { parallelism-max = 5 } }
cacher-write-context        { fork-join-executor { parallelism-max = 5 } }
elastic-context             { fork-join-executor { parallelism-max = 5 } }

spending-retrieve-context   { fork-join-executor { parallelism-max = 5 } }
geo-ip-context              { fork-join-executor { parallelism-max = 5 } }

common-geocoder-context     { fork-join-executor { parallelism-max = 5 } }
google-geocoder-context     { fork-join-executor { parallelism-max = 3 } }
yandex-geocoder-context     { fork-join-executor { parallelism-max = 3 } }
osm-geocoder-context        { fork-join-executor { parallelism-max = 3 } }

# Services
# ~~~~~
elastic.server="http://localhost:9200"
geo_ip.url="http://freegeoip.net/json/"
spending.server="http://clearspending.ru"
spending.localmode="false"
mashape.server="https://clearspending.p.mashape.com"
mashape.api="/v1/"
mashape.timeout="120000"

# Credentials
# ~~~~~
application.instanceID="copy"
kibana.user=""
kibana.pass=""
mashape.key=""

# elasticsearch.yml
# ~~~~~
#threadpool.index.type: fixed
#threadpool.index.size: 30
#threadpool.index.queue_size: 50000
#threadpool.search.type: fixed
#threadpool.search.size: 30
#threadpool.search.queue_size: 20000
